/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab4;

import org.junit.Test;
import static org.junit.Assert.*;

public class AppTest {
    @Test public void appHasAGreeting() {
        App classUnderTest = new App();
        assertEquals("the type is string", String.class, classUnderTest.getGreeting().getClass());
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
        assertEquals("greetings is Hello World!", "Hello World!",classUnderTest.getGreeting());
    }

    @Test public void appGettingsSomeValue() {
        App classUnderTest = new App();
        assertEquals("getting default value which is 1", 1, classUnderTest.getSomeValue());
        classUnderTest.someValue = 5;
        assertEquals("getting modified value which is 5", 5, classUnderTest.getSomeValue());
        classUnderTest.someValue = 1;
        assertEquals("getting modified value which is 1", 1, classUnderTest.getSomeValue());
    }

    @Test public void appIncrementingValue() {
        App classUnderTest = new App();
        assertEquals("getting default value which is 1", 1, classUnderTest.getSomeValue());
        assertEquals("getting modified value from method which is incremented by 1 which must be 2", 2, classUnderTest.incementSomeValue(1));
        assertEquals("getting modified value from getter which is incremented by 1 which must be 2", 2, classUnderTest.getSomeValue());
        assertEquals("getting modified value from method which is incremented by 15 which must be 17", 17, classUnderTest.incementSomeValue(15));
        assertEquals("getting modified value from getter which is incremented by 15 which must be 17", 17, classUnderTest.getSomeValue());
        assertEquals("getting modified value from method which is incremented by -3 which must be 14", 14, classUnderTest.incementSomeValue(-3));
        assertEquals("getting modified value from getter which is incremented by -3 which must be 14", 14, classUnderTest.getSomeValue());
        assertEquals("getting modified value from method which is incremented by -17 which must be -3", -3, classUnderTest.incementSomeValue(-17));
        assertEquals("getting modified value from getter which is incremented by -17 which must be -3", -3, classUnderTest.getSomeValue());
        classUnderTest.someValue = 1;
        assertEquals("getting modified value which must be 1", 1, classUnderTest.getSomeValue());
    }

    @Test public void appDecrementValue() {
        App classUnderTest = new App();
        assertEquals("getting default value which is 1", 1, classUnderTest.getSomeValue());
        assertEquals("getting modified value from method which is dcremented by 1 which must be 0", 0, classUnderTest.decrementSomeValue(1));
        assertEquals("getting modified value from getter which is dcremented by 1 which must be 0", 0, classUnderTest.getSomeValue());
        assertEquals("getting modified value from method which is dcremented by 17 which must be -17", -17, classUnderTest.decrementSomeValue(17));
        assertEquals("getting modified value from getter which is dcremented by 17 which must be -17", -17, classUnderTest.getSomeValue());
        assertEquals("getting modified value from method which is dcremented by 3 which must be -20", -20, classUnderTest.decrementSomeValue(3));
        assertEquals("getting modified value from getter which is dcremented by 3 which must be -20", -20, classUnderTest.getSomeValue());
        assertEquals("getting modified value from method which is dcremented by -6 which must be -20", -14, classUnderTest.decrementSomeValue(-6));
        assertEquals("getting modified value from getter which is dcremented by -6 which must be -20", -14, classUnderTest.getSomeValue());
        assertEquals("getting modified value from method which is dcremented by -19 which must be 3", 3, classUnderTest.decrementSomeValue(-19));
        assertEquals("getting modified value from getter which is dcremented by -19 which must be 3", 3, classUnderTest.getSomeValue());
        classUnderTest.someValue = 1;
        assertEquals("getting modified value which must be 1", 1, classUnderTest.getSomeValue());
    }

    @Test public void appAppendingValueToArray() {
        App classUnderTest = new App();
        assertEquals("list must be empty", 0, classUnderTest.someList.size());
        assertEquals("list must append value '23' and return true", true, classUnderTest.appendToArray(23));
        assertEquals("list must have size of 1", 1, classUnderTest.someList.size());
        assertEquals("list must have 1st and only element of 23", Integer.valueOf(23), classUnderTest.someList.get(0));
        assertEquals("list must append value '-66' and return true", true, classUnderTest.appendToArray(-66));
        assertEquals("list must have size of 2", 2, classUnderTest.someList.size());
        assertEquals("list must have 1st element of 23", Integer.valueOf(23), classUnderTest.someList.get(0));
        assertEquals("list must have 2nd element of -66", Integer.valueOf(-66), classUnderTest.someList.get(1));
    }
}
